#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <iostream>
#include <conio.h>
#include <string>
#include <string.h>
#include <time.h>
#include <windows.h>

char usuario123[1000];

using namespace std;

int main();
void menuPrincipal();
void calendario();
void tarefasFixadas();
void recados();
void limparTela();
void escalar();

#include "login.h"

void limparTela(){
    system("CLS");
}

typedef struct informacoesTarefa{
    char nome[100];
    int responsaveis;
    int semana[7];
    char descricao [10000];
}tarefas;

void teclaVoltar(){
    cout << "     ______\n";
    cout << "<-- |Voltar|\n";
    cout << "     ------ \n";
}

void testarErro(FILE *arquivo){
    if(arquivo == NULL){
        cout << "\n\nERRO EM ABERTURA DE ARQUIVOS";
        exit(0);
    }
}

void abreFecha(char *diaDaSemana){
    char texto[100];
    char temp[100];

    strcpy(temp, "semana/");
    strcat(temp, diaDaSemana);
    strcat(temp, ".txt");

    FILE *arq = fopen(temp, "r");
    if(arq == NULL)
        cout << "\n Não há tarefas nesse dia\n";
    else
        while( !feof(arq) ){
            fscanf(arq, "\n%[^\n]s", texto);
            cout << "\n " << texto << "\n";
        }
}

void exibeCalendario(){
    teclaVoltar();

    cout << "Lista de tarefas no DOMINGO\n";
    abreFecha("domingo");
    cout << "\nLista de tarefas na SEGUNDA-FEIRA\n";
    abreFecha("segunda");
    cout << "\nLista de tarefas na TERÇA-FEIRA\n";
    abreFecha("terca");
    cout << "\nLista de tarefas na QUARTA-FEIRA\n";
    abreFecha("quarta");
    cout << "\nLista de tarefas na QUINTA-FEIRA\n";
    abreFecha("quinta");
    cout << "\nLista de tarefas na SEXTA-FEIRA\n";
    abreFecha("sexta");
    cout << "\nLista de tarefas no SÁBADO\n";
    abreFecha("sabado");
}

void adicionarNaLista(tarefas *nomeDaTarefa){
    FILE *lista = fopen("fixadasLista.txt", "a");
    testarErro(lista);
    //Nao podemos mudar esse scanf para fgets
    //Também não podemos colocar o \n do fputs de baixo do fputs que imprime no arquivo, ouviu bem tarcídio?
    fputs("\n", lista);
    fputs(nomeDaTarefa->nome, lista);
    fclose(lista);
}

void nomePasta(tarefas *nomeDaTarefa, char *temp){
    strcpy(temp,"tarefas/");
    strcat(temp, nomeDaTarefa->nome);
}

void adicionarNaPastaTarefas(tarefas *nomeDaTarefa){
    char *temp = (char*)calloc(100, sizeof(char));
    nomePasta(nomeDaTarefa, temp);
    strcat(temp, ".txt");

    FILE *afazer = fopen(temp, "wt");
    testarErro(afazer);

    fputs(nomeDaTarefa->nome, afazer);

    fclose(afazer);

    afazer = NULL;

    free(temp);
}

void adicionarNaPastaBinario(tarefas *nomeDaTarefa){
    char *temp = (char*)calloc(100, sizeof(char));
    nomePasta(nomeDaTarefa, temp);
    strcat(temp, ".dat");

    FILE *afazer = fopen(temp, "w");
    testarErro(afazer);

    fprintf(afazer ,"%d", nomeDaTarefa->responsaveis);

    fclose(afazer);

    afazer = NULL;

    free(temp);
}

void ordenaVetor(int *vetor, int indice){
    int temp, i, j;

    for(i = 0; i < indice; i++)
        for(j = i + 1; j < indice; j++)
            if(vetor[i] > vetor[j]){
                temp = vetor[i];
                vetor[i] = vetor[j];
                vetor[j] = temp;
            }
}

void adicionarNaDescricaoTarefas(tarefas *nomeDaTarefa){
    char *temp = (char*)calloc(100, sizeof(char));
    nomePasta(nomeDaTarefa, temp);
    strcat(temp, ".txt");

    FILE *afazer = fopen(temp, "at");
    testarErro(afazer);

    fputs("\n", afazer);
    fputs(nomeDaTarefa->descricao, afazer);

    fclose(afazer);

    afazer = NULL;

    free(temp);
}

void adicionaNoCalendario(tarefas *nomeDaTarefa, char *stringando){
    char *testando = (char*)calloc(100, sizeof(char));

    strcpy(testando, stringando);
    strcat(testando, ".txt");

    FILE *arq = fopen(testando, "a+");
    testarErro(arq);

    fprintf(arq, "\n");
    fprintf(arq, "%s", nomeDaTarefa->nome);

    fclose(arq);
    free(testando);

    arq = NULL;
}

void adicionaSemana(tarefas *nomeDaTarefa, int *vetor, int indice){
    char *temp = (char*)calloc(100, sizeof(char));
    nomePasta(nomeDaTarefa, temp);
    strcat(temp, ".txt");

    FILE *afazer = fopen(temp, "a");
    testarErro(afazer);

    fputs("\n", afazer);

    int i;

    for(i = 0; i < indice; i++){
        switch(vetor[i]){
            //Dava para fazer uma função para todos os cases que enviava o nome "domingo", ou "segunda"..
            //Isso economizaria linhas
            case 1:
                fprintf(afazer, "domingo, ");
                adicionaNoCalendario(nomeDaTarefa, "semana/domingo");
                break;
            case 2:
                fprintf(afazer, "segunda, ");
                adicionaNoCalendario(nomeDaTarefa, "semana/segunda");
                break;
            case 3:
                fprintf(afazer, "terca, ");
                adicionaNoCalendario(nomeDaTarefa, "semana/terca");
                break;
            case 4:
                fprintf(afazer, "quarta, ");
                adicionaNoCalendario(nomeDaTarefa, "semana/quarta");
                break;
            case 5:
                fprintf(afazer, "quinta, ");
                adicionaNoCalendario(nomeDaTarefa, "semana/quinta");
                break;
            case 6:
                fprintf(afazer, "sexta, ");
                adicionaNoCalendario(nomeDaTarefa, "semana/sexta");
                break;
            case 7:
                fprintf(afazer, "sabado, ");
                adicionaNoCalendario(nomeDaTarefa, "semana/sabado");
                break;
        }
    }

    fclose(afazer);

    afazer = NULL;

    free(temp);
}


int *adicionaVetor(int *vetor, int *indice, int num, int *cuidado){
    int i, cont = 0;

    //Verifica se já foi enviado pelo menos uma vez o num
    for(i = 0; i < (*indice); i ++)
        if(vetor[i] == num){
            (*cuidado)++;
            return vetor;
        }

    (*indice)++;
    vetor = (int*)realloc(vetor, (*indice)*sizeof(int));
    vetor[(*indice) - 1] = num;
    return vetor;


}

void adicionaFixadas(){
    limparTela();

    teclaVoltar();
    cout<< "               ADICIONAR TAREFAS\n\n";
    //Esse é um rascunho de como será adicionado as informações das tarefas, porém, pretendo mudar
    cout<< "Nessa aba, será solicitado:\n";
    cout<< " 1- Nome da Tarefa;\n";
    cout<< " 2- Dias da semana que será executada;\n";
    cout<< " 3- Número de responsáveis;\n";
    cout<< " 4- Descrição da tarefa;\n\n";

    tarefas *work = (tarefas*)calloc(1, sizeof(tarefas));
    //Criar uma funcao que proiba o uso de caracteres especiais
    cout << "Primeiro, digite o nome da tarefa (não use caracteres especiais): ";
    scanf("%[^\n]s", work->nome);

    adicionarNaLista(work);
    adicionarNaPastaTarefas(work);

    cout << "\nSegundo, digite o número de responsáveis: ";
    scanf("%d", &work->responsaveis);

    adicionarNaPastaBinario(work);

    cout << "\nTerceiro, selecione os dias da semana:\n";
    cout << " 1- Domingo\n";
    cout << " 2- Segunda-feira\n";
    cout << " 3- Terça-feira\n";
    cout << " 4- Quarta-feira\n";
    cout << " 5- Quinta-feira\n";
    cout << " 6- Sexta-feira\n";
    cout << " 7- Sábado-feira\n";

    cout << "\nOBS:Após selecionar todos os dias, aperte a tecla \"ENTER\" ";

    char opcao;
    int cuidado = 0;
    int a = 0;
    int *vetor = (int*)calloc(a, sizeof(int));
    int num;

    cout << "\nAdicionando:";
    while(opcao != 13){
        opcao = getch();
        switch(opcao){
            case '1':
                vetor = adicionaVetor(vetor, &a, 1, &cuidado);
                if(cuidado == 0)
                    cout << "\n Domingo";
                break;
            case '2':
                vetor = adicionaVetor(vetor, &a, 2, &cuidado);
                if(cuidado == 0)
                    cout << "\n Segunda-feira";
                break;
            case '3':
                vetor = adicionaVetor(vetor, &a, 3, &cuidado);
                if(cuidado == 0)
                    cout << "\n Terça-feira";
                break;
            case '4':
                vetor = adicionaVetor(vetor, &a, 4, &cuidado);
                if(cuidado == 0)
                    cout << "\n Quarta-feira";
                break;
            case '5':
                vetor = adicionaVetor(vetor, &a, 5, &cuidado);
                if(cuidado == 0)
                    cout << "\n Quinta-feira";
                break;
            case '6':
                vetor = adicionaVetor(vetor, &a, 6, &cuidado);
                if(cuidado == 0)
                    cout << "\n Sexta-feira";
                break;
            case '7':
                vetor = adicionaVetor(vetor, &a, 7, &cuidado);
                if(cuidado == 0)
                    cout << "\n Sábado";
                break;
            case 8:
                //PARA MELHORAR! Essa parte do código exclui os dias, porém, mostra apenas em uma linha
                cout << "\r (esse dia foi excluído na lista)";
                a--;
                vetor = (int*)realloc(vetor,a*sizeof(int));
                break;
        }
        cuidado = 0;
    }

    ordenaVetor(vetor, a);

    adicionaSemana(work, vetor, a);

    free(vetor);

    cout << "\n\nAdicione, agora, uma descrição(tecle ENTER ao terminar):";
    setbuf(stdin, NULL);
    fgets(work->descricao, sizeof(work->descricao), stdin);
    adicionarNaDescricaoTarefas(work);

    free(work);

    tarefasFixadas();
}

void abrirArquivoLista(){
     cout << "Listas de tarefas fixadas:\n";
     FILE *lista = fopen("fixadasLista.txt", "r");
        char texto[100];

        //testarErro(lista);
        if(lista == NULL){
            cout << "\n\nAinda não há nenhuma tarefa";
        } else{
            while( !feof(lista) ){
                fgets(texto, sizeof(texto), lista);
                //fscanf(lista, "%s", texto);
                cout << texto;
            }
        }

     fclose(lista);
     free(lista);
}

void criarArquivo(char *temp){
    char opcao;
    char texto[100];
    FILE *arq3 = fopen(temp, "a+");
    testarErro(arq3);

    while( !feof(arq3) ){
        fscanf(arq3, "\n%s", texto);
        if( strcmp(texto, usuario123) == 0){
            cout << "\n\nEi! Você já está responsável por esse tarefa!";

            cout << "\n\nAperte ENTER para reiniciar ou volte para a aba anterior";
            while(opcao != 49 && opcao != -32 && opcao != 13){
                opcao = getch();
            }

            switch(opcao){
                case 13:
                    escalar();
                    break;
                case -32:
                    opcao = getch();
                    if(opcao == 75)
                        tarefasFixadas();
                    else
                        escalar();
                    break;
            }
        }
    }

    fprintf(arq3, "\n%s", usuario123);
    fclose(arq3);
    free(arq3);
    escalar();
}

void escalar(){
    char tarefa[100], temp[100], texto[500], temp2[100];
    char opcao;
    int resp;
    int cont = 0;

    limparTela();
    teclaVoltar();
    cout << "\n                                  ESCALAÇÃO\n";

    abrirArquivoLista();

    cout << "\n\nDigite o nome da tarefa para obter mais informações: ";

    setbuf(stdin, NULL);
    scanf("%[^\n]s", tarefa);

    strcpy(temp, "tarefas/");
    strcat(temp, tarefa);
    strcat(temp, ".dat");

    FILE *arq = fopen(temp, "r");

    if(arq == NULL){
        cout << "\n\nEssa tarefa não existe\n";
        cout << "\n\nAperte ENTER para reiniciar ou volte para a aba anterior";

        while(opcao != 49 && opcao != -32 && opcao != 13){
            opcao = getch();
        }

        switch(opcao){
            case 13:
                escalar();
                break;
            case -32:
                opcao = getch();
                if(opcao == 75)
                    tarefasFixadas();
                else
                    escalar();
                break;
        }

    }else{
        fscanf(arq, "%d", &resp);
        cout << "\n Essa tarefa necessita de " << resp << " responsáveis\n";
    }

    fclose(arq);
    free(arq);

    strcpy(temp, "tarefas/responsaveis/");
    strcat(temp, tarefa);
    strcat(temp, "R.txt");


    FILE *arq2 = fopen(temp, "r");

    if(arq2 == NULL){
        cout << "\n Não há responsáveis para essa tarefa ainda";
    }else{
        cout << "\n-----------------------------------------------------------";
        cout << "\nLista de responsáveis\n";
        while( !feof(arq2) ){
                fscanf(arq2, "\n%[^\n]s", texto);
                cout << "\n " << texto;
        }
        cout << "\n-----------------------------------------------------------";
        fclose(arq2);
        free(arq2);
    }

    cout << "\n\nVocê deseja entrar na lista de responsáveis para essa atividade?\n";
    cout << "\n1- Sim";
    cout << "\n2- Não";
    cout << "\n3- Excluir meu nome da lista";

    opcao = getch();
    while(opcao < 49 && opcao > 50 && opcao != -32){
        opcao = getch();
    }

    //futuramente criar a opcao de perguntar antes se deseja voltar ou se deseja escolher alguma tarefa em especial

    switch(opcao){
        case '1':
            criarArquivo(temp);
            break;
        case '2':
            tarefasFixadas();
            break;
        case '3':
            limparTela();
            cout << "\n Não implementamos essa parte do código ;(\n\n";
            system("pause");
            tarefasFixadas();
            break;
        case -32:
            opcao = getch();
            if(opcao == 75)
                tarefasFixadas();
            else
                escalar();
            break;
    }


}

void tarefasFixadas(){
    char opcao;
    int cont = 0;

    while( (opcao < 49 || opcao > 52) && (opcao != -32) ){
        limparTela();

        teclaVoltar();
        cout << "              TAREFAS FIXADAS\n\n";

        abrirArquivoLista();

        cout << "\n\n\nInsira um comando\n";
        cout << "1- Adicionar novas tarefas fixas\n";
        cout << "2- Visualizar alguma tarefa fixa\n";
        cout << "3- Excluir alguma tarefa fixa\n";
        cout << "4- Escalação em alguma tarefa fixa\n";

        if(cont != 0)
            cout << "\n\nOpção inválida. Digite novamente um novo comando.\n";

        opcao = getch();

        cont ++;
    }

    switch(opcao){
        case -32:
            opcao = getch();
            if(opcao == 75)
                calendario();
            else
                tarefasFixadas();
            break;
        case  '1':
            adicionaFixadas();
            break;
        case '2':
            break;
        case '3':
            break;
        case '4':
            escalar();
            break;
    }
}

void calendario(){
    char opcao;
    int cont = 0;

    while( (opcao < 49 || opcao > 51) && (opcao != -32) ){
        limparTela();

        exibeCalendario();

        cout << "\nInsira um comando\n";
        cout << "1- Tarefas fixadas\n";
        cout << "2- Tarefas mensais\n";

        if(cont != 0)
            cout << "\n\nOpção inválida. Digite novamente um novo comando.\n";

        opcao = getch();

        cont ++;
    }

    cont = 0;

    switch(opcao){
        case -32:
            opcao = getch();
            if(opcao == 75)
                menuPrincipal();
            else
                calendario();
            break;
        case '1':
            tarefasFixadas();
            break;
        case '2':
            limparTela();
            cout << "\n Essa função não foi implementada, porém, seria muito semelhante a aba de tarefas fixadas\n";
            system("pause");
            calendario();
            break;
    }
}

void adicionarMensagem(){
    limparTela();
    char *texto = (char*)calloc(1000, sizeof(char));
    char *temp = (char*)calloc(100, sizeof(char));

    cout << "Digite o título da sua mensagem:\n";
    setbuf(stdin, NULL);
    scanf("%[^\n]s", texto);

    strcpy(temp, "mensagens/");
    strcat(temp, texto);
    strcat(temp, ".txt");
    FILE *arqmsg = fopen(temp, "a+");
    testarErro(arqmsg);

    FILE *salva = fopen("mensagens/salva.txt", "a+");
    testarErro(salva);
    fprintf(salva, "\n%s", texto);

    //Por que quando coloca um caractere especial no final, replica duas vezes?
    cout << "Descrição da mensagem:\n";
    setbuf(stdin, NULL);
    scanf("%[^\n]s", texto);
    fprintf(arqmsg, "%s", texto);


    fclose(salva);
    fclose(arqmsg);
    free(salva);
    free(temp);
    free(texto);

    recados();
}

void excluirMensagem(int *num){
    char *titulo = (char*)calloc(50, sizeof(char));
    char *temp = (char*)calloc(50, sizeof(char));
    char *transferindo = (char*)calloc(5, sizeof(char));

    cout << "\n\n------------------------------------------------------------------";
    cout << "\n\nDigite o nome da mensagem que você deseja excluir\n";
    setbuf(stdin, NULL);
    scanf("%[^\n]s", titulo);
    strcpy(temp, "mensagens/");
    strcat(temp, titulo);
    strcat(temp, ".txt");

    if(remove(temp) == 0){
        FILE *salva = fopen("mensagens/salva.txt", "a+");
        testarErro(salva);
        FILE *transfere = fopen("mensagens/transfere.txt", "a+");
        testarErro(transfere);

        while( !feof(salva) ){
            fscanf(salva, "\n%[^\n]s", transferindo);
            if(strcmp(transferindo, titulo) != 0){
                fprintf(transfere, "\n%s", transferindo);
            }
        }

        fclose(transfere);
        fclose(salva);
        free(salva);
        free(transfere);

        if(remove("mensagens/salva.txt") != 0){
            cout << "\nErro ao deletar mensagem.\n";
            cout << "\nO arquivo salvar não foi excluído.\n";
            exit(1);
        }

        rename("mensagens/transfere.txt", "mensagens/salva.txt");
    }else{
        cout << "\nErro ao deletar a mensagem.\n";
        cout << " Talvez ela não exista.\n";
        system("pause");
    }

    free(titulo);
    free(temp);
    free(transferindo);

    recados();

}

void recados(){
        char *leitura = (char*)calloc(50, sizeof(char));
        char *temp = (char*)calloc(50, sizeof(char));
        char *recado = (char*)calloc(1000, sizeof(char));
        char opcao;
        int cont = 0;
        int num;
        int delSalva = 0;

        limparTela();
        teclaVoltar();
        cout << "          MENSAGENS IMPORTANTES\n";
        cout << "\nComandos:\n";
        cout << "1- Adicionar mensagens\n";
        cout << "2- Excluir mensagens\n";

        FILE *salva = fopen("mensagens/salva.txt", "rt");
        if(salva == NULL)
            cout << "\nAinda não há nenhuma mensagem";
        else{
            //fgets(lixo, sizeof(lixo), salva);
            while( !feof(salva) ){


                setbuf(stdin, NULL);
                fscanf(salva, "\n%[^\n]s", leitura);

                strcpy(temp, "mensagens/");
                strcat(temp, leitura);
                strcat(temp, ".txt");
                FILE *arqdescricao = fopen(temp, "r");
                if(arqdescricao == NULL){
                    delSalva = 1;
                    fclose(arqdescricao);
                    free(arqdescricao);
                    break;
                }
                cout << "\n\nTítulo: " << leitura << "\nDescrição: ";

                while( !feof(arqdescricao)){
                    fgets(recado, sizeof(recado), arqdescricao);
                    cout << recado;
                }

                fclose(arqdescricao);
                free(arqdescricao);

            }
        }

        opcao = getch();

        //Eu poderia ter feito isso para todas as outras funções, não é?
        while( (opcao < 49 || opcao > 51) && (opcao != -32) ){
            if(cont == 0){
                cout << "\n\nOpção inválida. Digite novamente um novo comando.\n";
                cont++;
            }
            opcao = getch();
        }

        fclose(salva);
        free(salva);
        free(leitura);
        free(temp);
        free(recado);

        if(delSalva == 1){
            remove("mensagens/salva.txt");
        }

        switch(opcao){
            case -32:
                opcao = getch();
                if(opcao == 75)
                    menuPrincipal();
                else
                    recados();
                break;
            case '1':
                adicionarMensagem();
                break;
            case '2':
                excluirMensagem(&num);
                break;
            default:
                cout << "hello";
                break;
        }
}

void showMembros(){
    FILE *arqptr;
    char *lixo = (char*)calloc(2,sizeof(char));
    arqptr = fopen("dadosLogin.txt","r");
    fgets(lixo,2,arqptr);
    free(lixo);
    while(!feof(arqptr)){
        char *nome = (char*)calloc(30,sizeof(char));
        fgets(nome,30,arqptr);
        printf("%s",nome);
        free(nome);
    }
    printf("\n");
    fclose(arqptr);
}

void addMembros(){
    int sair = 0;
    char nome[30], senha[30], pas[100];
    FILE *pass, *nick;

    while(sair != 1){
        cout << "\nEscreva seu nome de usuário (use, no máximo, 30 caracteres):\n";
        setbuf(stdin,NULL);
        scanf("%[^\n]s", nome);
        setbuf(stdin, NULL);
        limparTela();
        //Podemos colocar uma função que veriica se o usuario tem menos de 20 caracteres

        cout << "\nQual será sua senha, " << nome <<  "?\n";
        scanf("%[^\n]s", senha);
        setbuf(stdin, NULL);
        limparTela();

        cout << "\nSeu nome é: " << nome;
        cout << "\nSua senha é: " << senha;

        cout << "\n\nGostaria de finalizar ou reiniciar o cadastro?" ;
        cout << "Caso reinicie, esse usuário e essa senha não serão cadastradas\n";
        cout << "1 - Finalizar\n";
        cout << "2 - Reiniciar\n\n";
        //Podeira ter a opção de cancelar o registro
        setbuf(stdin,NULL);
        scanf("%d", &sair);
        setbuf(stdin,NULL);
        limparTela();
    }
    strcpy(pas,"senhas/");
    strcat(pas,nome);
    strcat(pas,".txt");
    pass = fopen(pas,"a");
    fprintf(pass,"%s",senha);

    nick = fopen("dadosLogin.txt","a");
    fprintf(nick,"\n%s",nome);
    fclose(nick);
    fclose(pass);
    free(nick);
    free(pass);
}

void removeMembros(){
    char *membro = (char*)calloc(50, sizeof(char));
    char *temp = (char*)calloc(50, sizeof(char));
    char *transferindo = (char*)calloc(5, sizeof(char));

    cout << "\n\n------------------------------------------------------------------";
    cout << "\n\nDigite o nome do membro que você deseja remover\n";
    setbuf(stdin, NULL);
    scanf("%[^\n]s", membro);
    setbuf(stdin,NULL);
    strcpy(temp, "senhas/");
    strcat(temp, membro);
    strcat(temp, ".txt");

    if(remove(temp) == 0){
        FILE *dadosLogin = fopen("dadosLogin.txt", "a+");
        testarErro(dadosLogin);
        FILE *transfere = fopen("transfere.txt", "a+");
        testarErro(transfere);

        while( !feof(dadosLogin) ){
            setbuf(stdin,NULL);
            fscanf(dadosLogin, "\n%[^\n]s", transferindo);
            setbuf(stdin,NULL);
            if(strcmp(transferindo, membro) != 0){
                fprintf(transfere, "\n%s", transferindo);
            }
        }

        fclose(transfere);
        fclose(dadosLogin);
        free(dadosLogin);
        free(transfere);

        if(remove("dadosLogin.txt") != 0){
            cout << "\nErro ao deletar membro.\n";
            cout << "\nO arquivo salvar não foi excluído.\n";
            exit(1);
        }

        rename("transfere.txt", "dadosLogin.txt");
    }else{
        cout << "\nErro ao deletar o membro.\n";
        cout << " Talvez ele não exista.\n";
        exit(1);
    }

    free(membro);
    free(temp);
    free(transferindo);

}

void membros(){
    char opcao;
    int cont = 0;

    while(opcao < 49 || opcao > 52){
        limparTela();
        cout << "    Membros    \n";
        cout <<"--------------------------------------\n";
        showMembros();
        cout <<"\n--------------------------------------\n\n";
        cout << "1- Adicionar Membros\n";
        cout << "2- Excluir Membros\n";
        cout << "3- Voltar ao Menu\n";

        if(cont != 0)
            cout << "\n\nOpção inválida. Digite novamente um novo comando.\n";

        opcao = getch();

        cont ++;
    }

    cont = 0;

    limparTela();

    switch(opcao){
        case '1':
            addMembros();
            break;
        case '2':
            removeMembros();
            break;
        case '3':
            menuPrincipal();
            break;
    }

    membros();
}

void menuPrincipal(){
    char opcao;
    int cont = 0;

    while(opcao < '1' || opcao > '4'){
        limparTela();
        cout << "    Aplicação ComApp    \n";
        cout << "1- Calendario\n";
        cout << "2- Membros\n";
        cout << "3- Mensagens importantes\n";
        cout << "4- Sair\n";

        if(cont != 0)
            cout << "\n\nOpção inválida. Digite novamente um novo comando.\n";

        opcao = getch();

        cont ++;
    }

    cont = 0;

    switch(opcao){
        case '1':
            calendario();
            break;
        case '2':
            membros();
            break;
        case '3':
            //Essa função levará a outras que possuem alguns comandos em comum. Portanto,
            //seria interessante se fosse criado uma função para essa semelhanças
            recados();
            break;
        case '4':
            limparTela();
            main();
            break;

    }
}

int main(){
    setlocale(LC_ALL, "Portuguese");

    SetConsoleTitle("ComApp");

    char nome[100];

    login(nome);
    strcpy(usuario123,nome);

    cout << "\n\n\n---------------------------------------------";
    cout << "\n\n     Bem-vindo, " << nome;
    cout << "\n\n---------------------------------------------";

    Sleep(3000);

    menuPrincipal();

    return 0;

    system("pause");

}
